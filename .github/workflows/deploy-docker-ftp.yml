name: Docker FTP Deployment (Safe)

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'

jobs:
  build-and-upload:
    name: Build Docker Files and Upload via FTP
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment package
        run: |
          echo "📦 Creating Docker deployment package..."
          mkdir -p docker-deploy
          
          # Copy essential Docker files
          cp Dockerfile docker-deploy/
          cp docker-compose.build.yml docker-deploy/
          cp main-https.go docker-deploy/main-https.go
          cp go.mod docker-deploy/
          cp go.sum docker-deploy/
          
          # Copy management scripts
          cp scripts/docker-manage.sh docker-deploy/
          chmod +x docker-deploy/docker-manage.sh
          
          # Create .env file with actual secrets from GitHub
          cat > docker-deploy/.env << 'EOF'
          # Hugo Contact Form - Environment Configuration
          # Auto-configured from GitHub Secrets
          
          PORT=8080
          CORS_ALLOW_ORIGINS=${{ secrets.CORS_ALLOW_ORIGINS }}
          
          # SMTP Configuration
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}
          RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}
          
          # Security Token
          TOKEN_SECRET=${{ secrets.TOKEN_SECRET }}
          EOF
          
          # Create automated deployment script for server
          cat > docker-deploy/deploy-docker.sh << 'EOF'
          #!/bin/bash
          
          # Hugo Contact Form - Docker Deployment Script
          # Run this on your server after FTP upload completes
          
          set -e
          
          CONTAINER_NAME="hugo-contact-prod"
          IMAGE_NAME="hugo-contact-app-hugo-contact:latest"
          
          echo "🚀 Starting Docker deployment..."
          echo "📋 Using pre-configured .env file from GitHub Secrets"
          
          # Stop and remove existing container if it exists
          echo "🛑 Stopping existing container (if any)..."
          docker stop $CONTAINER_NAME 2>/dev/null || true
          docker rm $CONTAINER_NAME 2>/dev/null || true
          
          # Clean up old images to save space
          echo "🧹 Cleaning up old Docker images..."
          docker image prune -f
          
          # Build new Docker image
          echo "🔨 Building Docker image..."
          docker build -t $IMAGE_NAME .
          
          if [ $? -ne 0 ]; then
              echo "❌ Docker build failed!"
              exit 1
          fi
          
          # Start new container
          echo "🚀 Starting new container..."
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 8080:8080 \
            --env-file .env \
            $IMAGE_NAME
          
          # Wait for container to start
          echo "⏳ Waiting for container to initialize..."
          sleep 5
          
          # Check if container is running
          if docker ps | grep -q $CONTAINER_NAME; then
              echo "✅ Container started successfully!"
              
              # Perform health check
              echo "🏥 Performing health check..."
              max_attempts=10
              attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                  if curl -f -s http://localhost:8080/health > /dev/null 2>&1; then
                      health_data=$(curl -s http://localhost:8080/health)
                      echo "✅ Health check passed: $health_data"
                      echo ""
                      echo "🎉 Deployment completed successfully!"
                      echo "📍 Service available at: http://localhost:8080"
                      echo ""
                      echo "📊 Container status:"
                      docker ps | grep $CONTAINER_NAME
                      exit 0
                  fi
                  
                  echo "⏳ Health check attempt $attempt/$max_attempts..."
                  sleep 3
                  ((attempt++))
              done
              
              echo "❌ Health check failed after $max_attempts attempts"
              echo "📋 Container logs:"
              docker logs --tail 20 $CONTAINER_NAME
              exit 1
          else
              echo "❌ Container failed to start!"
              echo "📋 Checking logs..."
              docker logs $CONTAINER_NAME 2>/dev/null || echo "No logs available"
              exit 1
          fi
          EOF
          
          chmod +x docker-deploy/deploy-docker.sh
          
          # Create quick update script
          cat > docker-deploy/quick-update.sh << 'EOF'
          #!/bin/bash
          
          # Quick update script - rebuilds and restarts container
          
          echo "🔄 Quick Docker update..."
          
          # Stop container
          docker stop hugo-contact-prod 2>/dev/null || true
          docker rm hugo-contact-prod 2>/dev/null || true
          
          # Rebuild and start
          docker build -t hugo-contact-app-hugo-contact:latest .
          docker run -d \
            --name hugo-contact-prod \
            --restart unless-stopped \
            -p 8080:8080 \
            --env-file .env \
            hugo-contact-app-hugo-contact:latest
          
          # Check status
          sleep 3
          if curl -s http://localhost:8080/health > /dev/null 2>&1; then
              echo "✅ Update complete - service is healthy!"
          else
              echo "⚠️  Service may still be starting..."
          fi
          
          docker ps | grep hugo-contact-prod
          EOF
          
          chmod +x docker-deploy/quick-update.sh
          
          # Create README with instructions
          cat > docker-deploy/README.md << 'EOF'
          # Docker Deployment Files
          
          ## Files Uploaded
          - `Dockerfile` - Docker build configuration
          - `docker-compose.build.yml` - Docker Compose configuration
          - `main-https.go` - Application source code
          - `go.mod`, `go.sum` - Go dependencies
          - `.env` - Environment configuration (NEEDS YOUR VALUES!)
          - `deploy-docker.sh` - Automated deployment script
          - `quick-update.sh` - Quick rebuild script
          - `docker-manage.sh` - Full management script
          
          ## Deployment Steps
          
          1. **Configure .env file**:
             ```bash
             nano .env
             # Replace all placeholder values with your actual credentials
             ```
          
          2. **Run deployment**:
             ```bash
             ./deploy-docker.sh
             ```
          
          3. **Verify it's working**:
             ```bash
             curl http://localhost:8080/health
             ```
          
          ## Management Commands
          
          - **Status**: `docker ps | grep hugo-contact`
          - **Logs**: `docker logs hugo-contact-prod`
          - **Restart**: `docker restart hugo-contact-prod`
          - **Update**: `./quick-update.sh`
          - **Full management**: `./docker-manage.sh [command]`
          
          ## Troubleshooting
          
          - Check logs: `docker logs hugo-contact-prod`
          - Check status: `./docker-manage.sh status`
          - Rebuild: `./deploy-docker.sh`
          EOF
          
          echo "✅ Deployment package created!"
          ls -la docker-deploy/
      
      - name: Deploy via FTPS
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASS }}
          local-dir: ./docker-deploy/
          server-dir: ./hugo-contact-docker/
          protocol: ftps
          security: strict
          exclude: |
            **/.git*
            **/.DS_Store
      
      - name: Deployment Summary
        run: |
          echo "## 📦 Docker Files Uploaded via FTP!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ What Was Uploaded:" >> $GITHUB_STEP_SUMMARY
          echo "- Docker build files (Dockerfile, docker-compose.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- Application source code (main-https.go, go.mod, go.sum)" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment scripts (deploy-docker.sh, quick-update.sh)" >> $GITHUB_STEP_SUMMARY
          echo "- Management tools (docker-manage.sh)" >> $GITHUB_STEP_SUMMARY
          echo "- Environment template (.env - needs configuration)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps (Manual via SSH):" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **SSH into your server**" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   ssh k000490@your-server" >> $GITHUB_STEP_SUMMARY
          echo "   cd /home/k000490/www/12/htdocs/hugo-contact-docker" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. **Configure .env file with your credentials**" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   nano .env" >> $GITHUB_STEP_SUMMARY
          echo "   # Replace all placeholder values" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "3. **Run deployment script**" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   ./deploy-docker.sh" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "4. **Verify deployment**" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   curl http://localhost:8080/health" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Note" >> $GITHUB_STEP_SUMMARY
          echo "This workflow does NOT have SSH access to your server." >> $GITHUB_STEP_SUMMARY
          echo "Only FTP upload is automated. Docker operations are manual." >> $GITHUB_STEP_SUMMARY
name: Deploy via FTP

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'

env:
  DOCKER_IMAGE: hugo-contact
  CONTAINER_NAME: hugo-contact-prod

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Install dependencies
        run: go mod download
      
      - name: Run tests
        run: go test ./... -v
      
      - name: Build application
        run: go build -v ./...

  deploy:
    name: Deploy to Server via FTP
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment package
        run: |
          mkdir -p deploy-package
          
          # Copy essential files
          cp main.go Dockerfile go.mod go.sum docker-compose.build.yml deploy-package/
          cp manage-service.sh deploy-package/
          
          # Copy deployment script
          cp scripts/deploy.sh deploy-package/
          chmod +x deploy-package/manage-service.sh deploy-package/deploy.sh
          
          # Create .env file with production settings
          cat > deploy-package/.env << 'EOF'
          # SMTP Configuration
          SMTP_HOST=mail23.hi7.de
          SMTP_PORT=587
          SMTP_USERNAME=k000490-017
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SENDER_EMAIL=system@connexxo.com
          RECIPIENT_EMAIL=info@connexxo.com
          
          # CORS Configuration
          CORS_ALLOW_ORIGINS=http://localhost:1313,https://v2.connexxo.com,https://connexxo.com,http://contact.connexxo.com:8080
          
          # Security Token
          TOKEN_SECRET=${{ secrets.TOKEN_SECRET }}
          
          # Server Configuration
          PORT=8080
          EOF
          
          # Create deployment instructions
          cat > deploy-package/DEPLOY-INSTRUCTIONS.txt << 'EOF'
          Hugo Contact Form - FTP Deployment Instructions
          
          1. All files have been uploaded to your server
          2. SSH into your server and navigate to the deployment directory
          3. Run the deployment script:
             ./deploy.sh production
          
          4. Check service status:
             ./manage-service.sh status
          
          5. View logs if needed:
             ./manage-service.sh logs
          
          Health Check URL: http://your-server:8080/health
          EOF
      
      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./deploy-package/
          server-dir: ${{ secrets.FTP_REMOTE_DIR }}
          port: ${{ secrets.FTP_PORT }}
          protocol: ${{ secrets.FTP_PROTOCOL }}
          security: ${{ secrets.FTP_SECURITY }}
          dangerous-clean-slate: false
      
      - name: Create post-deployment notification
        run: |
          echo "✅ Files deployed successfully via FTP!"
          echo "📁 Remote directory: ${{ secrets.FTP_REMOTE_DIR }}"
          echo "🔧 Next steps:"
          echo "   1. SSH into your server"
          echo "   2. Navigate to: ${{ secrets.FTP_REMOTE_DIR }}"
          echo "   3. Run: ./deploy.sh production"
          echo "   4. Check status: ./manage-service.sh status"
          echo "   5. Test: curl http://your-server:8080/health"

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Send success notification
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          echo "✅ FTP deployment successful!"
          echo "📋 Manual steps required:"
          echo "   • SSH into server"
          echo "   • Run deployment script"
          echo "   • Verify service health"
      
      - name: Send failure notification
        if: ${{ needs.deploy.result == 'failure' }}
        run: |
          echo "❌ FTP deployment failed"
          echo "Check the workflow logs for details"
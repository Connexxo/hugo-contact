name: Automated Docker Deployment

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docs/**'

jobs:
  deploy:
    name: Build and Deploy Docker Container
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image locally
        run: |
          echo "🔨 Building Docker image..."
          docker build -t hugo-contact-app-hugo-contact:latest .
          
          echo "📦 Saving Docker image to tar file..."
          docker save hugo-contact-app-hugo-contact:latest | gzip > hugo-contact-docker-image.tar.gz
          
          echo "✅ Image built and saved successfully!"
          ls -lah hugo-contact-docker-image.tar.gz
      
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            echo "🚀 Starting automated Docker deployment..."
            
            # Navigate to application directory
            cd /home/k000490/www/12/htdocs/hugo-contact
            
            # Stop existing container gracefully
            echo "🛑 Stopping existing container..."
            docker stop hugo-contact-prod || true
            docker rm hugo-contact-prod || true
            
            # Clean up old images to save space
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            docker images | grep "<none>" | awk '{print $3}' | head -10 | xargs -r docker rmi || true
            
            # Check disk space
            echo "💾 Checking disk space..."
            df -h .
            
            echo "✅ Server prepared for new deployment"
      
      - name: Upload Docker image to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SSH_PORT || 22 }}
          source: hugo-contact-docker-image.tar.gz
          target: /home/k000490/www/12/htdocs/hugo-contact/
          
      - name: Load and start new container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASS }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            cd /home/k000490/www/12/htdocs/hugo-contact
            
            # Load new Docker image
            echo "📦 Loading new Docker image..."
            gunzip -c hugo-contact-docker-image.tar.gz | docker load
            
            # Remove the uploaded tar file to save space
            rm -f hugo-contact-docker-image.tar.gz
            
            # Start new container with production configuration
            echo "🚀 Starting new container..."
            docker run -d \
              --name hugo-contact-prod \
              --restart unless-stopped \
              -p 8080:8080 \
              -e PORT=8080 \
              -e CORS_ALLOW_ORIGINS=${{ secrets.CORS_ALLOW_ORIGINS || 'https://connexxo.com,https://www.connexxo.com' }} \
              -e SMTP_HOST=${{ secrets.SMTP_HOST }} \
              -e SMTP_PORT=${{ secrets.SMTP_PORT || '587' }} \
              -e SMTP_USERNAME=${{ secrets.SMTP_USERNAME }} \
              -e SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }} \
              -e SENDER_EMAIL=${{ secrets.SENDER_EMAIL }} \
              -e RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }} \
              -e TOKEN_SECRET=${{ secrets.TOKEN_SECRET }} \
              hugo-contact-app-hugo-contact:latest
            
            # Wait for container to start
            echo "⏳ Waiting for container to initialize..."
            sleep 5
            
            # Verify container is running
            if docker ps | grep -q hugo-contact-prod; then
                echo "✅ Container started successfully!"
                docker ps | grep hugo-contact-prod
            else
                echo "❌ Container failed to start!"
                docker logs hugo-contact-prod || true
                exit 1
            fi
            
            # Health check
            echo "🏥 Performing health check..."
            max_attempts=10
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
                if curl -f -s http://localhost:8080/health > /dev/null 2>&1; then
                    health_data=$(curl -s http://localhost:8080/health)
                    echo "✅ Health check passed: $health_data"
                    break
                fi
                
                echo "⏳ Health check attempt $attempt/$max_attempts..."
                sleep 3
                ((attempt++))
                
                if [ $attempt -gt $max_attempts ]; then
                    echo "❌ Health check failed after $max_attempts attempts"
                    echo "📋 Container logs:"
                    docker logs --tail 20 hugo-contact-prod
                    exit 1
                fi
            done
            
            echo "🎉 Deployment completed successfully!"
            echo "📍 Service available at: http://localhost:8080"
            echo "📊 Container status:"
            docker ps | grep hugo-contact-prod
      
      - name: Deployment Summary
        run: |
          echo "## 🎉 Docker Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deployed Components:" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Image: hugo-contact-app-hugo-contact:latest" >> $GITHUB_STEP_SUMMARY
          echo "- Container: hugo-contact-prod" >> $GITHUB_STEP_SUMMARY
          echo "- Port: 8080 (HTTP)" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: Passed ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📍 Service Endpoints:" >> $GITHUB_STEP_SUMMARY
          echo "- Health: http://your-server:8080/health" >> $GITHUB_STEP_SUMMARY
          echo "- Form: http://your-server:8080/f/contact" >> $GITHUB_STEP_SUMMARY
          echo "- Token: http://your-server:8080/form-token.js" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Management:" >> $GITHUB_STEP_SUMMARY
          echo "- SSH: \`docker logs hugo-contact-prod\`" >> $GITHUB_STEP_SUMMARY
          echo "- Restart: \`docker restart hugo-contact-prod\`" >> $GITHUB_STEP_SUMMARY
          echo "- Status: \`docker ps | grep hugo-contact-prod\`" >> $GITHUB_STEP_SUMMARY